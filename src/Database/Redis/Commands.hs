-- Generated by GenCmds.hs. DO NOT EDIT.

{-# LANGUAGE OverloadedStrings #-}

module Database.Redis.Commands (

-- ** Connection
auth, -- |Authenticate to the server (<http://redis.io/commands/auth>).
echo, -- |Echo the given string (<http://redis.io/commands/echo>).
ping, -- |Ping the server (<http://redis.io/commands/ping>).
quit, -- |Close the connection (<http://redis.io/commands/quit>).
select, -- |Change the selected database for the current connection (<http://redis.io/commands/select>).

-- ** Keys
del, -- |Delete a key (<http://redis.io/commands/del>).
exists, -- |Determine if a key exists (<http://redis.io/commands/exists>).
expire, -- |Set a key's time to live in seconds (<http://redis.io/commands/expire>).
expireat, -- |Set the expiration for a key as a UNIX timestamp (<http://redis.io/commands/expireat>).
keys, -- |Find all keys matching the given pattern (<http://redis.io/commands/keys>).
move, -- |Move a key to another database (<http://redis.io/commands/move>).
objectRefcount, -- |Inspect the internals of Redis objects (<http://redis.io/commands/object>). The Redis command @OBJECT@ is split up into 'objectRefcount', 'objectEncoding', 'objectIdletime'.
objectEncoding, -- |Inspect the internals of Redis objects (<http://redis.io/commands/object>). The Redis command @OBJECT@ is split up into 'objectRefcount', 'objectEncoding', 'objectIdletime'.
objectIdletime, -- |Inspect the internals of Redis objects (<http://redis.io/commands/object>). The Redis command @OBJECT@ is split up into 'objectRefcount', 'objectEncoding', 'objectIdletime'.
persist, -- |Remove the expiration from a key (<http://redis.io/commands/persist>).
randomkey, -- |Return a random key from the keyspace (<http://redis.io/commands/randomkey>).
rename, -- |Rename a key (<http://redis.io/commands/rename>).
renamenx, -- |Rename a key, only if the new key does not exist (<http://redis.io/commands/renamenx>).
ttl, -- |Get the time to live for a key (<http://redis.io/commands/ttl>).
getType, -- |Determine the type stored at key (<http://redis.io/commands/type>).

-- ** Hashes
hdel, -- |Delete one or more hash fields (<http://redis.io/commands/hdel>).
hexists, -- |Determine if a hash field exists (<http://redis.io/commands/hexists>).
hget, -- |Get the value of a hash field (<http://redis.io/commands/hget>).
hgetall, -- |Get all the fields and values in a hash (<http://redis.io/commands/hgetall>).
hincrby, -- |Increment the integer value of a hash field by the given number (<http://redis.io/commands/hincrby>).
hkeys, -- |Get all the fields in a hash (<http://redis.io/commands/hkeys>).
hlen, -- |Get the number of fields in a hash (<http://redis.io/commands/hlen>).
hmget, -- |Get the values of all the given hash fields (<http://redis.io/commands/hmget>).
hmset, -- |Set multiple hash fields to multiple values (<http://redis.io/commands/hmset>).
hset, -- |Set the string value of a hash field (<http://redis.io/commands/hset>).
hsetnx, -- |Set the value of a hash field, only if the field does not exist (<http://redis.io/commands/hsetnx>).
hvals, -- |Get all the values in a hash (<http://redis.io/commands/hvals>).

-- ** Lists
blpop, -- |Remove and get the first element in a list, or block until one is available (<http://redis.io/commands/blpop>).
brpop, -- |Remove and get the last element in a list, or block until one is available (<http://redis.io/commands/brpop>).
brpoplpush, -- |Pop a value from a list, push it to another list and return it; or block until one is available (<http://redis.io/commands/brpoplpush>).
lindex, -- |Get an element from a list by its index (<http://redis.io/commands/lindex>).
linsertBefore, -- |Insert an element before or after another element in a list (<http://redis.io/commands/linsert>). The Redis command @LINSERT@ is split up into 'linsertBefore', 'linsertAfter'.
linsertAfter, -- |Insert an element before or after another element in a list (<http://redis.io/commands/linsert>). The Redis command @LINSERT@ is split up into 'linsertBefore', 'linsertAfter'.
llen, -- |Get the length of a list (<http://redis.io/commands/llen>).
lpop, -- |Remove and get the first element in a list (<http://redis.io/commands/lpop>).
lpush, -- |Prepend one or multiple values to a list (<http://redis.io/commands/lpush>).
lpushx, -- |Prepend a value to a list, only if the list exists (<http://redis.io/commands/lpushx>).
lrange, -- |Get a range of elements from a list (<http://redis.io/commands/lrange>).
lrem, -- |Remove elements from a list (<http://redis.io/commands/lrem>).
lset, -- |Set the value of an element in a list by its index (<http://redis.io/commands/lset>).
ltrim, -- |Trim a list to the specified range (<http://redis.io/commands/ltrim>).
rpop, -- |Remove and get the last element in a list (<http://redis.io/commands/rpop>).
rpoplpush, -- |Remove the last element in a list, append it to another list and return it (<http://redis.io/commands/rpoplpush>).
rpush, -- |Append one or multiple values to a list (<http://redis.io/commands/rpush>).
rpushx, -- |Append a value to a list, only if the list exists (<http://redis.io/commands/rpushx>).

-- ** Server
bgrewriteaof, -- |Asynchronously rewrite the append-only file (<http://redis.io/commands/bgrewriteaof>).
bgsave, -- |Asynchronously save the dataset to disk (<http://redis.io/commands/bgsave>).
configGet, -- |Get the value of a configuration parameter (<http://redis.io/commands/config-get>).
configResetstat, -- |Reset the stats returned by INFO (<http://redis.io/commands/config-resetstat>).
configSet, -- |Set a configuration parameter to the given value (<http://redis.io/commands/config-set>).
dbsize, -- |Return the number of keys in the selected database (<http://redis.io/commands/dbsize>).
flushall, -- |Remove all keys from all databases (<http://redis.io/commands/flushall>).
flushdb, -- |Remove all keys from the current database (<http://redis.io/commands/flushdb>).
info, -- |Get information and statistics about the server (<http://redis.io/commands/info>).
lastsave, -- |Get the UNIX time stamp of the last successful save to disk (<http://redis.io/commands/lastsave>).
save, -- |Synchronously save the dataset to disk (<http://redis.io/commands/save>).
shutdown, -- |Synchronously save the dataset to disk and then shut down the server (<http://redis.io/commands/shutdown>).
slaveof, -- |Make the server a slave of another instance, or promote it as master (<http://redis.io/commands/slaveof>).

-- ** Sets
sadd, -- |Add one or more members to a set (<http://redis.io/commands/sadd>).
scard, -- |Get the number of members in a set (<http://redis.io/commands/scard>).
sdiff, -- |Subtract multiple sets (<http://redis.io/commands/sdiff>).
sdiffstore, -- |Subtract multiple sets and store the resulting set in a key (<http://redis.io/commands/sdiffstore>).
sinter, -- |Intersect multiple sets (<http://redis.io/commands/sinter>).
sinterstore, -- |Intersect multiple sets and store the resulting set in a key (<http://redis.io/commands/sinterstore>).
sismember, -- |Determine if a given value is a member of a set (<http://redis.io/commands/sismember>).
smembers, -- |Get all the members in a set (<http://redis.io/commands/smembers>).
smove, -- |Move a member from one set to another (<http://redis.io/commands/smove>).
spop, -- |Remove and return a random member from a set (<http://redis.io/commands/spop>).
srandmember, -- |Get a random member from a set (<http://redis.io/commands/srandmember>).
srem, -- |Remove one or more members from a set (<http://redis.io/commands/srem>).
sunion, -- |Add multiple sets (<http://redis.io/commands/sunion>).
sunionstore, -- |Add multiple sets and store the resulting set in a key (<http://redis.io/commands/sunionstore>).

-- ** Sorted Sets
zadd, -- |Add one or more members to a sorted set, or update its score if it already exists (<http://redis.io/commands/zadd>).
zcard, -- |Get the number of members in a sorted set (<http://redis.io/commands/zcard>).
zcount, -- |Count the members in a sorted set with scores within the given values (<http://redis.io/commands/zcount>).
zincrby, -- |Increment the score of a member in a sorted set (<http://redis.io/commands/zincrby>).
zrank, -- |Determine the index of a member in a sorted set (<http://redis.io/commands/zrank>).
zrem, -- |Remove one or more members from a sorted set (<http://redis.io/commands/zrem>).
zremrangebyrank, -- |Remove all members in a sorted set within the given indexes (<http://redis.io/commands/zremrangebyrank>).
zremrangebyscore, -- |Remove all members in a sorted set within the given scores (<http://redis.io/commands/zremrangebyscore>).
zrevrank, -- |Determine the index of a member in a sorted set, with scores ordered from high to low (<http://redis.io/commands/zrevrank>).
zscore, -- |Get the score associated with the given member in a sorted set (<http://redis.io/commands/zscore>).

-- ** Strings
append, -- |Append a value to a key (<http://redis.io/commands/append>).
decr, -- |Decrement the integer value of a key by one (<http://redis.io/commands/decr>).
decrby, -- |Decrement the integer value of a key by the given number (<http://redis.io/commands/decrby>).
get, -- |Get the value of a key (<http://redis.io/commands/get>).
getbit, -- |Returns the bit value at offset in the string value stored at key (<http://redis.io/commands/getbit>).
getrange, -- |Get a substring of the string stored at a key (<http://redis.io/commands/getrange>).
getset, -- |Set the string value of a key and return its old value (<http://redis.io/commands/getset>).
incr, -- |Increment the integer value of a key by one (<http://redis.io/commands/incr>).
incrby, -- |Increment the integer value of a key by the given number (<http://redis.io/commands/incrby>).
mget, -- |Get the values of all the given keys (<http://redis.io/commands/mget>).
mset, -- |Set multiple keys to multiple values (<http://redis.io/commands/mset>).
msetnx, -- |Set multiple keys to multiple values, only if none of the keys exist (<http://redis.io/commands/msetnx>).
set, -- |Set the string value of a key (<http://redis.io/commands/set>).
setbit, -- |Sets or clears the bit at offset in the string value stored at key (<http://redis.io/commands/setbit>).
setex, -- |Set the value and expiration of a key (<http://redis.io/commands/setex>).
setnx, -- |Set the value of a key, only if the key does not exist (<http://redis.io/commands/setnx>).
setrange, -- |Overwrite part of a string at key starting at the specified offset (<http://redis.io/commands/setrange>).
strlen, -- |Get the length of the value stored in a key (<http://redis.io/commands/strlen>).
) where

import Prelude hiding (min,max)
import Control.Applicative
import Database.Redis.ManualCommands
import Database.Redis.Types
import Database.Redis.Internal

flushall :: (RedisReturnStatus a)
    => Redis (Maybe a)
flushall  = decodeStatus <$> sendRequest (["FLUSHALL"] )

hdel :: (RedisArgString key, RedisArgList (f field), RedisArgString field, RedisReturnBool a)
    => key -- ^ 
    -> f field -- ^ 
    -> Redis (Maybe a)
hdel key field = decodeBool <$> sendRequest (["HDEL"] ++ [encodeString key] ++ encodeList field )

hincrby :: (RedisArgString key, RedisArgString field, RedisArgInt increment, RedisReturnInt a)
    => key -- ^ 
    -> field -- ^ 
    -> increment -- ^ 
    -> Redis (Maybe a)
hincrby key field increment = decodeInt <$> sendRequest (["HINCRBY"] ++ [encodeString key] ++ [encodeString field] ++ [encodeInt increment] )

configResetstat :: (RedisReturnStatus a)
    => Redis (Maybe a)
configResetstat  = decodeStatus <$> sendRequest (["CONFIG RESETSTAT"] )

del :: (RedisArgList (f key), RedisArgString key, RedisReturnInt a)
    => f key -- ^ 
    -> Redis (Maybe a)
del key = decodeInt <$> sendRequest (["DEL"] ++ encodeList key )

zrevrank :: (RedisArgString key, RedisArgString member, RedisReturnInt a)
    => key -- ^ 
    -> member -- ^ 
    -> Redis (Maybe a)
zrevrank key member = decodeInt <$> sendRequest (["ZREVRANK"] ++ [encodeString key] ++ [encodeString member] )

brpoplpush :: (RedisArgString source, RedisArgString destination, RedisArgInt timeout, RedisReturnString a)
    => source -- ^ 
    -> destination -- ^ 
    -> timeout -- ^ 
    -> Redis (Maybe a)
brpoplpush source destination timeout = decodeString <$> sendRequest (["BRPOPLPUSH"] ++ [encodeString source] ++ [encodeString destination] ++ [encodeInt timeout] )

incrby :: (RedisArgString key, RedisArgInt increment, RedisReturnInt a)
    => key -- ^ 
    -> increment -- ^ 
    -> Redis (Maybe a)
incrby key increment = decodeInt <$> sendRequest (["INCRBY"] ++ [encodeString key] ++ [encodeInt increment] )

rpop :: (RedisArgString key, RedisReturnString a)
    => key -- ^ 
    -> Redis (Maybe a)
rpop key = decodeString <$> sendRequest (["RPOP"] ++ [encodeString key] )

setrange :: (RedisArgString key, RedisArgInt offset, RedisArgString value, RedisReturnInt a)
    => key -- ^ 
    -> offset -- ^ 
    -> value -- ^ 
    -> Redis (Maybe a)
setrange key offset value = decodeInt <$> sendRequest (["SETRANGE"] ++ [encodeString key] ++ [encodeInt offset] ++ [encodeString value] )

setbit :: (RedisArgString key, RedisArgInt offset, RedisArgString value, RedisReturnInt a)
    => key -- ^ 
    -> offset -- ^ 
    -> value -- ^ 
    -> Redis (Maybe a)
setbit key offset value = decodeInt <$> sendRequest (["SETBIT"] ++ [encodeString key] ++ [encodeInt offset] ++ [encodeString value] )

save :: (RedisReturnStatus a)
    => Redis (Maybe a)
save  = decodeStatus <$> sendRequest (["SAVE"] )

echo :: (RedisArgString message, RedisReturnString a)
    => message -- ^ 
    -> Redis (Maybe a)
echo message = decodeString <$> sendRequest (["ECHO"] ++ [encodeString message] )

blpop :: (RedisArgList (f key), RedisArgString key, RedisArgInt timeout, RedisReturnPair a)
    => f key -- ^ 
    -> timeout -- ^ 
    -> Redis (Maybe a)
blpop key timeout = decodePair <$> sendRequest (["BLPOP"] ++ encodeList key ++ [encodeInt timeout] )

sdiffstore :: (RedisArgString destination, RedisArgList (f key), RedisArgString key, RedisReturnInt a)
    => destination -- ^ 
    -> f key -- ^ 
    -> Redis (Maybe a)
sdiffstore destination key = decodeInt <$> sendRequest (["SDIFFSTORE"] ++ [encodeString destination] ++ encodeList key )

move :: (RedisArgString key, RedisArgInt db, RedisReturnBool a)
    => key -- ^ 
    -> db -- ^ 
    -> Redis (Maybe a)
move key db = decodeBool <$> sendRequest (["MOVE"] ++ [encodeString key] ++ [encodeInt db] )

getrange :: (RedisArgString key, RedisArgInt start, RedisArgInt end, RedisReturnString a)
    => key -- ^ 
    -> start -- ^ 
    -> end -- ^ 
    -> Redis (Maybe a)
getrange key start end = decodeString <$> sendRequest (["GETRANGE"] ++ [encodeString key] ++ [encodeInt start] ++ [encodeInt end] )

srem :: (RedisArgString key, RedisArgList (f member), RedisArgString member, RedisReturnInt a)
    => key -- ^ 
    -> f member -- ^ 
    -> Redis (Maybe a)
srem key member = decodeInt <$> sendRequest (["SREM"] ++ [encodeString key] ++ encodeList member )

getbit :: (RedisArgString key, RedisArgInt offset, RedisReturnInt a)
    => key -- ^ 
    -> offset -- ^ 
    -> Redis (Maybe a)
getbit key offset = decodeInt <$> sendRequest (["GETBIT"] ++ [encodeString key] ++ [encodeInt offset] )

zcount :: (RedisArgString key, RedisArgDouble min, RedisArgDouble max, RedisReturnInt a)
    => key -- ^ 
    -> min -- ^ 
    -> max -- ^ 
    -> Redis (Maybe a)
zcount key min max = decodeInt <$> sendRequest (["ZCOUNT"] ++ [encodeString key] ++ [encodeDouble min] ++ [encodeDouble max] )

quit :: (RedisReturnStatus a)
    => Redis (Maybe a)
quit  = decodeStatus <$> sendRequest (["QUIT"] )

msetnx :: (RedisArgHash (f key value), RedisArgString key, RedisArgString value, RedisReturnBool a)
    => f key value -- ^ 
    -> Redis (Maybe a)
msetnx keyValue = decodeBool <$> sendRequest (["MSETNX"] ++ encodeHash keyValue )

sismember :: (RedisArgString key, RedisArgString member, RedisReturnBool a)
    => key -- ^ 
    -> member -- ^ 
    -> Redis (Maybe a)
sismember key member = decodeBool <$> sendRequest (["SISMEMBER"] ++ [encodeString key] ++ [encodeString member] )

bgrewriteaof :: (RedisReturnStatus a)
    => Redis (Maybe a)
bgrewriteaof  = decodeStatus <$> sendRequest (["BGREWRITEAOF"] )

hmset :: (RedisArgString key, RedisArgHash (f field value), RedisArgString field, RedisArgString value, RedisReturnStatus a)
    => key -- ^ 
    -> f field value -- ^ 
    -> Redis (Maybe a)
hmset key fieldValue = decodeStatus <$> sendRequest (["HMSET"] ++ [encodeString key] ++ encodeHash fieldValue )

scard :: (RedisArgString key, RedisReturnInt a)
    => key -- ^ 
    -> Redis (Maybe a)
scard key = decodeInt <$> sendRequest (["SCARD"] ++ [encodeString key] )

zincrby :: (RedisArgString key, RedisArgInt increment, RedisArgString member, RedisReturnDouble a)
    => key -- ^ 
    -> increment -- ^ 
    -> member -- ^ 
    -> Redis (Maybe a)
zincrby key increment member = decodeDouble <$> sendRequest (["ZINCRBY"] ++ [encodeString key] ++ [encodeInt increment] ++ [encodeString member] )

sinter :: (RedisArgList (f key), RedisArgString key, RedisReturnSet a)
    => f key -- ^ 
    -> Redis (Maybe a)
sinter key = decodeSet <$> sendRequest (["SINTER"] ++ encodeList key )

mset :: (RedisArgHash (f key value), RedisArgString key, RedisArgString value, RedisReturnStatus a)
    => f key value -- ^ 
    -> Redis (Maybe a)
mset keyValue = decodeStatus <$> sendRequest (["MSET"] ++ encodeHash keyValue )

rpoplpush :: (RedisArgString source, RedisArgString destination, RedisReturnString a)
    => source -- ^ 
    -> destination -- ^ 
    -> Redis (Maybe a)
rpoplpush source destination = decodeString <$> sendRequest (["RPOPLPUSH"] ++ [encodeString source] ++ [encodeString destination] )

hlen :: (RedisArgString key, RedisReturnInt a)
    => key -- ^ 
    -> Redis (Maybe a)
hlen key = decodeInt <$> sendRequest (["HLEN"] ++ [encodeString key] )

setex :: (RedisArgString key, RedisArgInt seconds, RedisArgString value, RedisReturnStatus a)
    => key -- ^ 
    -> seconds -- ^ 
    -> value -- ^ 
    -> Redis (Maybe a)
setex key seconds value = decodeStatus <$> sendRequest (["SETEX"] ++ [encodeString key] ++ [encodeInt seconds] ++ [encodeString value] )

sunionstore :: (RedisArgString destination, RedisArgList (f key), RedisArgString key, RedisReturnInt a)
    => destination -- ^ 
    -> f key -- ^ 
    -> Redis (Maybe a)
sunionstore destination key = decodeInt <$> sendRequest (["SUNIONSTORE"] ++ [encodeString destination] ++ encodeList key )

brpop :: (RedisArgList (f key), RedisArgString key, RedisArgInt timeout, RedisReturnPair a)
    => f key -- ^ 
    -> timeout -- ^ 
    -> Redis (Maybe a)
brpop key timeout = decodePair <$> sendRequest (["BRPOP"] ++ encodeList key ++ [encodeInt timeout] )

hgetall :: (RedisArgString key, RedisReturnHash a)
    => key -- ^ 
    -> Redis (Maybe a)
hgetall key = decodeHash <$> sendRequest (["HGETALL"] ++ [encodeString key] )

dbsize :: (RedisReturnInt a)
    => Redis (Maybe a)
dbsize  = decodeInt <$> sendRequest (["DBSIZE"] )

lpop :: (RedisArgString key, RedisReturnString a)
    => key -- ^ 
    -> Redis (Maybe a)
lpop key = decodeString <$> sendRequest (["LPOP"] ++ [encodeString key] )

hmget :: (RedisArgString key, RedisArgList (f field), RedisArgString field, RedisReturnList a)
    => key -- ^ 
    -> f field -- ^ 
    -> Redis (Maybe a)
hmget key field = decodeList <$> sendRequest (["HMGET"] ++ [encodeString key] ++ encodeList field )

lrange :: (RedisArgString key, RedisArgInt start, RedisArgInt stop, RedisReturnList a)
    => key -- ^ 
    -> start -- ^ 
    -> stop -- ^ 
    -> Redis (Maybe a)
lrange key start stop = decodeList <$> sendRequest (["LRANGE"] ++ [encodeString key] ++ [encodeInt start] ++ [encodeInt stop] )

expire :: (RedisArgString key, RedisArgInt seconds, RedisReturnBool a)
    => key -- ^ 
    -> seconds -- ^ 
    -> Redis (Maybe a)
expire key seconds = decodeBool <$> sendRequest (["EXPIRE"] ++ [encodeString key] ++ [encodeInt seconds] )

lastsave :: (RedisReturnInt a)
    => Redis (Maybe a)
lastsave  = decodeInt <$> sendRequest (["LASTSAVE"] )

llen :: (RedisArgString key, RedisReturnInt a)
    => key -- ^ 
    -> Redis (Maybe a)
llen key = decodeInt <$> sendRequest (["LLEN"] ++ [encodeString key] )

decrby :: (RedisArgString key, RedisArgInt decrement, RedisReturnInt a)
    => key -- ^ 
    -> decrement -- ^ 
    -> Redis (Maybe a)
decrby key decrement = decodeInt <$> sendRequest (["DECRBY"] ++ [encodeString key] ++ [encodeInt decrement] )

mget :: (RedisArgList (f key), RedisArgString key, RedisReturnList a)
    => f key -- ^ 
    -> Redis (Maybe a)
mget key = decodeList <$> sendRequest (["MGET"] ++ encodeList key )

zadd :: (RedisArgString key, RedisArgHash (f score member), RedisArgDouble score, RedisArgString member, RedisReturnInt a)
    => key -- ^ 
    -> f score member -- ^ 
    -> Redis (Maybe a)
zadd key scoreMember = decodeInt <$> sendRequest (["ZADD"] ++ [encodeString key] ++ encodeHash scoreMember )

keys :: (RedisArgString pattern, RedisReturnList a)
    => pattern -- ^ 
    -> Redis (Maybe a)
keys pattern = decodeList <$> sendRequest (["KEYS"] ++ [encodeString pattern] )

bgsave :: (RedisReturnStatus a)
    => Redis (Maybe a)
bgsave  = decodeStatus <$> sendRequest (["BGSAVE"] )

slaveof :: (RedisArgString host, RedisArgString port, RedisReturnStatus a)
    => host -- ^ 
    -> port -- ^ 
    -> Redis (Maybe a)
slaveof host port = decodeStatus <$> sendRequest (["SLAVEOF"] ++ [encodeString host] ++ [encodeString port] )

getset :: (RedisArgString key, RedisArgString value, RedisReturnString a)
    => key -- ^ 
    -> value -- ^ 
    -> Redis (Maybe a)
getset key value = decodeString <$> sendRequest (["GETSET"] ++ [encodeString key] ++ [encodeString value] )

rpushx :: (RedisArgString key, RedisArgString value, RedisReturnInt a)
    => key -- ^ 
    -> value -- ^ 
    -> Redis (Maybe a)
rpushx key value = decodeInt <$> sendRequest (["RPUSHX"] ++ [encodeString key] ++ [encodeString value] )

setnx :: (RedisArgString key, RedisArgString value, RedisReturnBool a)
    => key -- ^ 
    -> value -- ^ 
    -> Redis (Maybe a)
setnx key value = decodeBool <$> sendRequest (["SETNX"] ++ [encodeString key] ++ [encodeString value] )

zrank :: (RedisArgString key, RedisArgString member, RedisReturnInt a)
    => key -- ^ 
    -> member -- ^ 
    -> Redis (Maybe a)
zrank key member = decodeInt <$> sendRequest (["ZRANK"] ++ [encodeString key] ++ [encodeString member] )

zremrangebyscore :: (RedisArgString key, RedisArgDouble min, RedisArgDouble max, RedisReturnInt a)
    => key -- ^ 
    -> min -- ^ 
    -> max -- ^ 
    -> Redis (Maybe a)
zremrangebyscore key min max = decodeInt <$> sendRequest (["ZREMRANGEBYSCORE"] ++ [encodeString key] ++ [encodeDouble min] ++ [encodeDouble max] )

ttl :: (RedisArgString key, RedisReturnInt a)
    => key -- ^ 
    -> Redis (Maybe a)
ttl key = decodeInt <$> sendRequest (["TTL"] ++ [encodeString key] )

hkeys :: (RedisArgString key, RedisReturnSet a)
    => key -- ^ 
    -> Redis (Maybe a)
hkeys key = decodeSet <$> sendRequest (["HKEYS"] ++ [encodeString key] )

rpush :: (RedisArgString key, RedisArgList (f value), RedisArgString value, RedisReturnInt a)
    => key -- ^ 
    -> f value -- ^ 
    -> Redis (Maybe a)
rpush key value = decodeInt <$> sendRequest (["RPUSH"] ++ [encodeString key] ++ encodeList value )

randomkey :: (RedisReturnKey a)
    => Redis (Maybe a)
randomkey  = decodeKey <$> sendRequest (["RANDOMKEY"] )

spop :: (RedisArgString key, RedisReturnString a)
    => key -- ^ 
    -> Redis (Maybe a)
spop key = decodeString <$> sendRequest (["SPOP"] ++ [encodeString key] )

hsetnx :: (RedisArgString key, RedisArgString field, RedisArgString value, RedisReturnBool a)
    => key -- ^ 
    -> field -- ^ 
    -> value -- ^ 
    -> Redis (Maybe a)
hsetnx key field value = decodeBool <$> sendRequest (["HSETNX"] ++ [encodeString key] ++ [encodeString field] ++ [encodeString value] )

configGet :: (RedisArgString parameter, RedisReturnHash a)
    => parameter -- ^ 
    -> Redis (Maybe a)
configGet parameter = decodeHash <$> sendRequest (["CONFIG GET"] ++ [encodeString parameter] )

hvals :: (RedisArgString key, RedisReturnSet a)
    => key -- ^ 
    -> Redis (Maybe a)
hvals key = decodeSet <$> sendRequest (["HVALS"] ++ [encodeString key] )

exists :: (RedisArgString key, RedisReturnBool a)
    => key -- ^ 
    -> Redis (Maybe a)
exists key = decodeBool <$> sendRequest (["EXISTS"] ++ [encodeString key] )

sunion :: (RedisArgList (f key), RedisArgString key, RedisReturnSet a)
    => f key -- ^ 
    -> Redis (Maybe a)
sunion key = decodeSet <$> sendRequest (["SUNION"] ++ encodeList key )

zrem :: (RedisArgString key, RedisArgList (f member), RedisArgString member, RedisReturnInt a)
    => key -- ^ 
    -> f member -- ^ 
    -> Redis (Maybe a)
zrem key member = decodeInt <$> sendRequest (["ZREM"] ++ [encodeString key] ++ encodeList member )

smembers :: (RedisArgString key, RedisReturnSet a)
    => key -- ^ 
    -> Redis (Maybe a)
smembers key = decodeSet <$> sendRequest (["SMEMBERS"] ++ [encodeString key] )

ping :: (RedisReturnStatus a)
    => Redis (Maybe a)
ping  = decodeStatus <$> sendRequest (["PING"] )

rename :: (RedisArgString key, RedisArgString newkey, RedisReturnStatus a)
    => key -- ^ 
    -> newkey -- ^ 
    -> Redis (Maybe a)
rename key newkey = decodeStatus <$> sendRequest (["RENAME"] ++ [encodeString key] ++ [encodeString newkey] )

decr :: (RedisArgString key, RedisReturnInt a)
    => key -- ^ 
    -> Redis (Maybe a)
decr key = decodeInt <$> sendRequest (["DECR"] ++ [encodeString key] )

select :: (RedisArgInt index, RedisReturnStatus a)
    => index -- ^ 
    -> Redis (Maybe a)
select index = decodeStatus <$> sendRequest (["SELECT"] ++ [encodeInt index] )

hexists :: (RedisArgString key, RedisArgString field, RedisReturnBool a)
    => key -- ^ 
    -> field -- ^ 
    -> Redis (Maybe a)
hexists key field = decodeBool <$> sendRequest (["HEXISTS"] ++ [encodeString key] ++ [encodeString field] )

auth :: (RedisArgString password, RedisReturnStatus a)
    => password -- ^ 
    -> Redis (Maybe a)
auth password = decodeStatus <$> sendRequest (["AUTH"] ++ [encodeString password] )

sinterstore :: (RedisArgString destination, RedisArgList (f key), RedisArgString key, RedisReturnInt a)
    => destination -- ^ 
    -> f key -- ^ 
    -> Redis (Maybe a)
sinterstore destination key = decodeInt <$> sendRequest (["SINTERSTORE"] ++ [encodeString destination] ++ encodeList key )

shutdown :: (RedisReturnStatus a)
    => Redis (Maybe a)
shutdown  = decodeStatus <$> sendRequest (["SHUTDOWN"] )

configSet :: (RedisArgString parameter, RedisArgString value, RedisReturnStatus a)
    => parameter -- ^ 
    -> value -- ^ 
    -> Redis (Maybe a)
configSet parameter value = decodeStatus <$> sendRequest (["CONFIG SET"] ++ [encodeString parameter] ++ [encodeString value] )

renamenx :: (RedisArgString key, RedisArgString newkey, RedisReturnBool a)
    => key -- ^ 
    -> newkey -- ^ 
    -> Redis (Maybe a)
renamenx key newkey = decodeBool <$> sendRequest (["RENAMENX"] ++ [encodeString key] ++ [encodeString newkey] )

expireat :: (RedisArgString key, RedisArgInt timestamp, RedisReturnBool a)
    => key -- ^ 
    -> timestamp -- ^ 
    -> Redis (Maybe a)
expireat key timestamp = decodeBool <$> sendRequest (["EXPIREAT"] ++ [encodeString key] ++ [encodeInt timestamp] )

get :: (RedisArgString key, RedisReturnString a)
    => key -- ^ 
    -> Redis (Maybe a)
get key = decodeString <$> sendRequest (["GET"] ++ [encodeString key] )

lrem :: (RedisArgString key, RedisArgInt count, RedisArgString value, RedisReturnInt a)
    => key -- ^ 
    -> count -- ^ 
    -> value -- ^ 
    -> Redis (Maybe a)
lrem key count value = decodeInt <$> sendRequest (["LREM"] ++ [encodeString key] ++ [encodeInt count] ++ [encodeString value] )

incr :: (RedisArgString key, RedisReturnInt a)
    => key -- ^ 
    -> Redis (Maybe a)
incr key = decodeInt <$> sendRequest (["INCR"] ++ [encodeString key] )

zcard :: (RedisArgString key, RedisReturnInt a)
    => key -- ^ 
    -> Redis (Maybe a)
zcard key = decodeInt <$> sendRequest (["ZCARD"] ++ [encodeString key] )

ltrim :: (RedisArgString key, RedisArgInt start, RedisArgInt stop, RedisReturnStatus a)
    => key -- ^ 
    -> start -- ^ 
    -> stop -- ^ 
    -> Redis (Maybe a)
ltrim key start stop = decodeStatus <$> sendRequest (["LTRIM"] ++ [encodeString key] ++ [encodeInt start] ++ [encodeInt stop] )

append :: (RedisArgString key, RedisArgString value, RedisReturnInt a)
    => key -- ^ 
    -> value -- ^ 
    -> Redis (Maybe a)
append key value = decodeInt <$> sendRequest (["APPEND"] ++ [encodeString key] ++ [encodeString value] )

lset :: (RedisArgString key, RedisArgInt index, RedisArgString value, RedisReturnStatus a)
    => key -- ^ 
    -> index -- ^ 
    -> value -- ^ 
    -> Redis (Maybe a)
lset key index value = decodeStatus <$> sendRequest (["LSET"] ++ [encodeString key] ++ [encodeInt index] ++ [encodeString value] )

info :: (RedisReturnString a)
    => Redis (Maybe a)
info  = decodeString <$> sendRequest (["INFO"] )

hget :: (RedisArgString key, RedisArgString field, RedisReturnString a)
    => key -- ^ 
    -> field -- ^ 
    -> Redis (Maybe a)
hget key field = decodeString <$> sendRequest (["HGET"] ++ [encodeString key] ++ [encodeString field] )

sdiff :: (RedisArgList (f key), RedisArgString key, RedisReturnSet a)
    => f key -- ^ 
    -> Redis (Maybe a)
sdiff key = decodeSet <$> sendRequest (["SDIFF"] ++ encodeList key )

smove :: (RedisArgString source, RedisArgString destination, RedisArgString member, RedisReturnBool a)
    => source -- ^ 
    -> destination -- ^ 
    -> member -- ^ 
    -> Redis (Maybe a)
smove source destination member = decodeBool <$> sendRequest (["SMOVE"] ++ [encodeString source] ++ [encodeString destination] ++ [encodeString member] )

flushdb :: (RedisReturnStatus a)
    => Redis (Maybe a)
flushdb  = decodeStatus <$> sendRequest (["FLUSHDB"] )

set :: (RedisArgString key, RedisArgString value, RedisReturnStatus a)
    => key -- ^ 
    -> value -- ^ 
    -> Redis (Maybe a)
set key value = decodeStatus <$> sendRequest (["SET"] ++ [encodeString key] ++ [encodeString value] )

zremrangebyrank :: (RedisArgString key, RedisArgInt start, RedisArgInt stop, RedisReturnInt a)
    => key -- ^ 
    -> start -- ^ 
    -> stop -- ^ 
    -> Redis (Maybe a)
zremrangebyrank key start stop = decodeInt <$> sendRequest (["ZREMRANGEBYRANK"] ++ [encodeString key] ++ [encodeInt start] ++ [encodeInt stop] )

sadd :: (RedisArgString key, RedisArgList (f member), RedisArgString member, RedisReturnInt a)
    => key -- ^ 
    -> f member -- ^ 
    -> Redis (Maybe a)
sadd key member = decodeInt <$> sendRequest (["SADD"] ++ [encodeString key] ++ encodeList member )

lpush :: (RedisArgString key, RedisArgList (f value), RedisArgString value, RedisReturnInt a)
    => key -- ^ 
    -> f value -- ^ 
    -> Redis (Maybe a)
lpush key value = decodeInt <$> sendRequest (["LPUSH"] ++ [encodeString key] ++ encodeList value )

lindex :: (RedisArgString key, RedisArgInt index, RedisReturnString a)
    => key -- ^ 
    -> index -- ^ 
    -> Redis (Maybe a)
lindex key index = decodeString <$> sendRequest (["LINDEX"] ++ [encodeString key] ++ [encodeInt index] )

zscore :: (RedisArgString key, RedisArgString member, RedisReturnDouble a)
    => key -- ^ 
    -> member -- ^ 
    -> Redis (Maybe a)
zscore key member = decodeDouble <$> sendRequest (["ZSCORE"] ++ [encodeString key] ++ [encodeString member] )

strlen :: (RedisArgString key, RedisReturnInt a)
    => key -- ^ 
    -> Redis (Maybe a)
strlen key = decodeInt <$> sendRequest (["STRLEN"] ++ [encodeString key] )

hset :: (RedisArgString key, RedisArgString field, RedisArgString value, RedisReturnBool a)
    => key -- ^ 
    -> field -- ^ 
    -> value -- ^ 
    -> Redis (Maybe a)
hset key field value = decodeBool <$> sendRequest (["HSET"] ++ [encodeString key] ++ [encodeString field] ++ [encodeString value] )

lpushx :: (RedisArgString key, RedisArgString value, RedisReturnInt a)
    => key -- ^ 
    -> value -- ^ 
    -> Redis (Maybe a)
lpushx key value = decodeInt <$> sendRequest (["LPUSHX"] ++ [encodeString key] ++ [encodeString value] )

srandmember :: (RedisArgString key, RedisReturnString a)
    => key -- ^ 
    -> Redis (Maybe a)
srandmember key = decodeString <$> sendRequest (["SRANDMEMBER"] ++ [encodeString key] )

persist :: (RedisArgString key, RedisReturnBool a)
    => key -- ^ 
    -> Redis (Maybe a)
persist key = decodeBool <$> sendRequest (["PERSIST"] ++ [encodeString key] )


